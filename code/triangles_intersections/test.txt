//Test
    //double
    double * dpa = new double[3]{ 2,0,0 };
    double * dpb = new double[3]{ 5,0,0 };
    double * dpc = new double[3]{ 2,5,0 };
    double * dpd = new double[3]{ 1,1,5 };


    CGAL::Gmpq gmpqa[3] = { 2,0,0 };
    CGAL::Gmpq gmpqb[3] = { 5,0,0 };
    CGAL::Gmpq gmpqc[3] = { 2,5,0 };
    CGAL::Gmpq gmpqd[3] = { 1,1,5 };

    genericPoint * ipa  = new explicitPoint3D(2,0, 0);
    genericPoint * ipb  = new explicitPoint3D(5,0, 0);
    genericPoint * ipc  = new explicitPoint3D(2,5, 0);
    genericPoint * ipd  = new explicitPoint3D(1,1,5);




    //call the orient3D function with the 3 points

    int result_double = orient3dT(dpa, dpb, dpc, dpd);
    int result_gmpq = orient3dT(gmpqa, gmpqb, gmpqc, gmpqd);
    int result_ip = orient3dT(ipa, ipb, ipc, ipd);

    std::cout << "The results of Orient3d are: " << std::endl;
    std::cout << "Double: " << result_double << std::endl;
    std::cout << "Gmpq: " << result_gmpq << std::endl;
    std::cout << "Implicit Point: " << result_ip << std::endl;


    //Test orient2d

    auto dpa2 = new double[2]{ 2,0 };
    auto dpb2 = new double[2]{ 5,0 };
    auto dpc2 = new double[2]{ 1,0 };

    auto gmpqa2 = new CGAL::Gmpq[2]{ 2,0 };
    auto gmpqb2 = new CGAL::Gmpq[2]{ 5,0 };
    auto gmpqc2 = new CGAL::Gmpq[2]{ 1,-0 };

    genericPoint * ipa2 = new explicitPoint2D(2,0);
    genericPoint * ipb2 = new explicitPoint2D(5,0);
    genericPoint * ipc2 = new explicitPoint2D(1,-0);


    double result_double2 = orient2dT(dpa2, dpb2, dpc2);
    double result_gmpq2 = orient2dT(gmpqa2, gmpqb2, gmpqc2);
    double result_ip2 = orient2dT(ipa2, ipb2, ipc2);

    std::cout << "The results Orient2d are: " << std::endl;
    std::cout << "Double: " << result_double2 << std::endl;
    std::cout << "Gmpq: " << result_gmpq2 << std::endl;
    std::cout << "Implicit Point: " << result_ip2 << std::endl;

    //test points coincident

    double * dpa = new double[3]{ 2,0,0 };
    double * dpb = new double[3]{ 2,2,0 };

    CGAL::Gmpq * rpa = new CGAL::Gmpq[3]{ 2,0,0 };
    CGAL::Gmpq * rpb = new CGAL::Gmpq[3]{ 2,2,0 };

    genericPoint * gpa = new explicitPoint3D(2,0,0);
    genericPoint * gpb = new explicitPoint3D(2,2,0);

    bool result1 = points_are_coincident(dpa, dpb);
    bool result2 = points_are_coincident(rpa, rpb);
    bool result3 = points_are_coincident(gpa, gpb);

    cout << "Test points are coincident" << endl;
    cout << "Double: " << result1 << endl;
    cout << "Rationals: " << result2 << endl;
    cout << "GenericPoint: " << result3 << endl;

    //Test point in segment
    double * v1 = new double[3]{ 0,0,0 };
    double * v2 = new double[3]{ 2,0,0 };
    double * p = new double[3]{ 1,0,0 };

    CGAL::Gmpq * r1 = new CGAL::Gmpq[3]{ 0,0,0 };
    CGAL::Gmpq * r2 = new CGAL::Gmpq[3]{ 2,0,0 };
    CGAL::Gmpq * rp = new CGAL::Gmpq[3]{ 1,0,0 };

    genericPoint * g1 = new explicitPoint3D(0,0,0);
    genericPoint * g2 = new explicitPoint3D(2,0,0);
    genericPoint * gp = new explicitPoint3D(1,0,0);

    bool result1 = point_in_segment(p, v2,v1);
    bool result2 = point_in_segment(rp, r1,r2);
    bool result3 = point_in_inner_segment(gp, g1,g2);

    cout << "Test points in segment" << endl;
    cout << "Double: " << result1 << endl;
    cout << "Rationals: " << result2 << endl;
    cout << "GenericPoint: " << result3 << endl;

     //Test point in triangle
    double * v1 = new double[3]{ 0,0,0 };
    double * v2 = new double[3]{ 2,0,0 };
    double * v3 = new double[3]{ 1,2,0 };
    double * p = new double[3]{ 1,1,0 };

    CGAL::Gmpq * r1 = new CGAL::Gmpq[3]{ 0,0,0 };
    CGAL::Gmpq * r2 = new CGAL::Gmpq[3]{ 2,0,0 };
    CGAL::Gmpq * r3 = new CGAL::Gmpq[3]{ 1,2,0 };
    CGAL::Gmpq * rp = new CGAL::Gmpq[3]{ 1,3,0 };

    genericPoint * g1 = new explicitPoint3D(0,0,0);
    genericPoint * g2 = new explicitPoint3D(2,0,0);
    genericPoint * g3 = new explicitPoint3D(1,2,0);
    genericPoint * gp = new explicitPoint3D(1,3,0);

    bool result1 = point_in_triangle(p,v1, v2, v3);
    bool result2 = point_in_triangle(rp,r1, r2, r3);
    bool result3 = point_in_inner_triangle(gp,g1, g2, g3);

    cout << "Test point stay in triangle abc" << endl;
    cout << "Double: " << result1 << endl;
    cout << "Rationals: " << result2 << endl;
    cout << "GenericPoint: " << result3 << endl;



    //Test segment cross segment
    double * da1 = new double[3]{ -2,0,0 };
    double * da2 = new double[3]{ 2,0,0 };
    double * db1 = new double[3]{ 0,-2,10 };
    double * db2 = new double[3]{ -2,0,0 };

    CGAL::Gmpq * ra1 = new CGAL::Gmpq[3]{ -2,0,0 };
    CGAL::Gmpq * ra2 = new CGAL::Gmpq[3]{ 2,0,0 };
    CGAL::Gmpq * rb1 = new CGAL::Gmpq[3]{ 0,-2,0 };
    CGAL::Gmpq * rb2 = new CGAL::Gmpq[3]{ 0,1,0 };

    genericPoint * ga1 = new explicitPoint3D(-2,0,0);
    genericPoint * ga2 = new explicitPoint3D(2,0,0);
    genericPoint * gb1 = new explicitPoint3D(0,-2,0);
    genericPoint * gb2 = new explicitPoint3D(0,1,0);


    bool result1 = segment_cross_segment(da1, da2, db1, db2);
    bool result2 = segment_cross_segment(ra1, ra2, rb1, rb2);
    bool result3 = segment_cross_segment(ga1, ga2, gb1, gb2);


    cout << "Test segment a cross segment b" << endl;
    cout << "Double: " << result1 << endl;
    cout << "Rationals: " << result2 << endl;
    cout << "GenericPoint: " << result3 << endl;

    //Test segment cross segment
    double * da1 = new double[3]{ -2,0,0 };
    double * da2 = new double[3]{ 2,0,0 };
    double * db1 = new double[3]{ 0,-2,10 };
    double * db2 = new double[3]{ -2,0,0 };

    CGAL::Gmpq * ra1 = new CGAL::Gmpq[3]{ -2,0,0 };
    CGAL::Gmpq * ra2 = new CGAL::Gmpq[3]{ 2,0,0 };
    CGAL::Gmpq * rb1 = new CGAL::Gmpq[3]{ 0,-2,0 };
    CGAL::Gmpq * rb2 = new CGAL::Gmpq[3]{ 0,1,0 };

    genericPoint * ga1 = new explicitPoint3D(-2,0,0);
    genericPoint * ga2 = new explicitPoint3D(2,0,0);
    genericPoint * gb1 = new explicitPoint3D(0,-2,0);
    genericPoint * gb2 = new explicitPoint3D(0,1,0);


    bool result1 = segment_cross_segment(da1, da2, db1, db2);
    bool result2 = segment_cross_segment(ra1, ra2, rb1, rb2);
    bool result3 = segment_cross_segment(ga1, ga2, gb1, gb2);


    cout << "Test segment a cross segment b" << endl;
    cout << "Double: " << result1 << endl;
    cout << "Rationals: " << result2 << endl;
    cout << "GenericPoint: " << result3 << endl;
}